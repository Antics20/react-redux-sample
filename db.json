{
  "articles": [
    {
      "id": 1,
      "title": "json-server1",
      "description": "typicode"
    },
    {
      "title": "Motivation",
      "description": "As the requirements for JavaScript single-page applications have become increasingly complicated, our code must manage more state than ever before. This state can include server responses and cached data, as well as locally created data that has not yet been persisted to the server. UI state is also increasing in complexity, as we need to manage active routes, selected tabs, spinners, pagination controls, and so on.",
      "id": 2
    },
    {
      "title": "hallo",
      "description": "dssww",
      "id": 3
    },
    {
      "title": "Actions",
      "description": "Actions are payloads of information that send data from your application to your store. They are the only source of information for the store. You send them to the store using store.dispatch().",
      "id": 4
    },
    {
      "title": "Reducers",
      "description": "Actions describe the fact that something happened, but don't specify how the application's state changes in response. This is the job of reducers.",
      "id": 5
    },
    {
      "title": "Store",
      "description": "The Store is the object that brings them together. The store has the following responsibilities:\n\nHolds application state;\nAllows access to state via getState();\nAllows state to be updated via dispatch(action);\nRegisters listeners via subscribe(listener);\nHandles unregistering of listeners via the function returned by subscribe(listener).",
      "id": 6
    },
    {
      "title": "Core Concepts",
      "description": "To change something in the state, you need to dispatch an action. An action is a plain JavaScript object (notice how we donâ€™t introduce any magic?) that describes what happened. Here are a few example actions:",
      "id": 7
    }
  ]
}